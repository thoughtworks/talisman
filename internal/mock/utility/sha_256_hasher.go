// Code generated by MockGen. DO NOT EDIT.
// Source: utility/sha_256_hasher.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSHA256Hasher is a mock of SHA256Hasher interface
type MockSHA256Hasher struct {
	ctrl     *gomock.Controller
	recorder *MockSHA256HasherMockRecorder
}

// MockSHA256HasherMockRecorder is the mock recorder for MockSHA256Hasher
type MockSHA256HasherMockRecorder struct {
	mock *MockSHA256Hasher
}

// NewMockSHA256Hasher creates a new mock instance
func NewMockSHA256Hasher(ctrl *gomock.Controller) *MockSHA256Hasher {
	mock := &MockSHA256Hasher{ctrl: ctrl}
	mock.recorder = &MockSHA256HasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSHA256Hasher) EXPECT() *MockSHA256HasherMockRecorder {
	return m.recorder
}

// CollectiveSHA256Hash mocks base method
func (m *MockSHA256Hasher) CollectiveSHA256Hash(paths []string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectiveSHA256Hash", paths)
	ret0, _ := ret[0].(string)
	return ret0
}

// CollectiveSHA256Hash indicates an expected call of CollectiveSHA256Hash
func (mr *MockSHA256HasherMockRecorder) CollectiveSHA256Hash(paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectiveSHA256Hash", reflect.TypeOf((*MockSHA256Hasher)(nil).CollectiveSHA256Hash), paths)
}
